class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class SinglyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
        self.size = 0

    def is_empty(self):
        return self.size == 0

    def add(self, data):
        new_node = Node(data)
        if self.is_empty():
            self.head = new_node
            self.tail = new_node
        else:
            self.tail.next = new_node
            self.tail = new_node
        self.size += 1

    def remove(self, data):
        if self.is_empty():
            raise Exception('List is empty')
        if self.head.data == data:
            self.head = self.head.next
            self.size -= 1
            return
        current_node = self.head
        while current_node.next:
            if current_node.next.data == data:
                current_node.next = current_node.next.next
                self.size -= 1
                return
            current_node = current_node.next
        raise Exception(f'{data} not found in list')

    def __str__(self):
        if self.is_empty():
            return 'List is empty'
        current_node = self.head
        linked_list_str = ''
        while current_node:
            linked_list_str += str(current_node.data) + ' -> '
            current_node = current_node.next
        linked_list_str += 'None'
        return linked_list_str

dgj = SinglyLinkedList()
dgj.add(3)
dgj.add(78)
dgj.add(9)
dgj.add(34)
print(dgj.__str__())